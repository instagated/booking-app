# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BaseStoreEntity {
  name: String!
  cost: Float!
  description: String

  """Product or Service ID"""
  UPCCode: String
  organization: Organization!
}

input BaseStoreEntityInput {
  name: String!
  cost: Float!
  description: String

  """Product or Service ID"""
  UPCCode: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type EmployeeSchedule {
  id: ID!
  begins: DateTime!
  ends: DateTime!
  isRecurring: Boolean!
  recurrenceInterval: Int
  recursOn: [Boolean!]
  recurrenceEndsOn: DateTime
  excludedDates: [DateTime!]
  employee: User!
}

input EmployeeScheduleInput {
  begins: DateTime!
  ends: DateTime!
  isRecurring: Boolean!
  recurrenceInterval: Int
  recursOn: [Boolean!]
  recurrenceEndsOn: DateTime
  excludedDates: [DateTime!]
  employeeId: ID
}

type Event {
  id: ID!
  datetime: DateTime!
  date: String!
  begins: String!
  ends: String!

  """duration in minutes"""
  duration: Int!
  customer: User!
  employee: User!
  organization: Organization!
}

input EventInput {
  datetime: DateTime!

  """duration in minutes"""
  duration: Int!
  employeeId: ID!
}

type HoursOfOperation {
  monday: Timeframe!
  tuesday: Timeframe!
  wednesday: Timeframe!
  thursday: Timeframe!
  friday: Timeframe!
  saturday: Timeframe!
  sunday: Timeframe!
}

input HoursOfOperationInput {
  monday: TimeframeInput!
  tuesday: TimeframeInput!
  wednesday: TimeframeInput!
  thursday: TimeframeInput!
  friday: TimeframeInput!
  saturday: TimeframeInput!
  sunday: TimeframeInput!
}

type Mutation {
  login(organizationUrlName: String!, password: String!, email: String!): User
  logout: String
  register(data: RegisterInput!): String!
  createUser(data: RegisterInput!): User!
  updateUser(data: UpdateUserInput!): User!
  createEvent(data: EventInput!): Event!
  deleteEvent(id: String!): Boolean!
  createService(data: ServiceInput!): Service!
  updateService(data: ServiceInput!, id: String!): Service!
  deleteService(id: String!): ID!
  createEmployeeSchedule(data: EmployeeScheduleInput!): EmployeeSchedule!
  updateEmployeeSchedule(data: EmployeeScheduleInput!, id: String!): EmployeeSchedule!
  deleteEmployeeSchedule(id: String!): String!
  employeeSchedule(id: String!): EmployeeSchedule!
  employeeSchedules(data: QueryEmployeeSchedulesInput): [EmployeeSchedule!]!
  updateOrganization(data: OrganizationInput!, id: String!): Organization!
  deleteUser(id: String!): User!
}

enum NumberOperator {
  GREATER
  LESSER
  EQUAL
}

type Organization {
  id: ID!
  urlName: String!
  name: String!
  phone: String!
  address: String!
  contactEmail: String!
  hoursOfOperation: HoursOfOperation!
  landingHtml: String!
}

input OrganizationInput {
  urlName: String!
  name: String!
  phone: String!
  address: String!
  contactEmail: String!
  hoursOfOperation: HoursOfOperationInput!
  landingHtml: String!
}

type PaginatedEventsResponse {
  items: [Event!]!
  total: Int!
}

input PaginatedResponseInput {
  offset: Float
  limit: Float
}

type PaginatedServiesResponse {
  items: [Service!]!
  total: Int!
}

type PaginatedUsersResponse {
  items: [User!]!
  total: Int!
}

type Product {
  name: String!
  cost: Float!
  description: String

  """Product or Service ID"""
  UPCCode: String
  organization: Organization!
  id: ID!
  inventory: Int!
}

input ProductInput {
  name: String!
  cost: Float!
  description: String

  """Product or Service ID"""
  UPCCode: String
  inventory: Int!
}

type Query {
  me: User
  users(data: QueryUsersInput!): PaginatedUsersResponse!
  user(id: String!): User!
  queryEvents(data: QueryEventsInput!): PaginatedEventsResponse!
  queryEvent(id: String!): Event!
  services(data: QueryServicesInput!): PaginatedServiesResponse!
  service(id: String!): Service!
  organization(data: QueryOrganizationInput!): Organization!
}

input QueryEmployeeSchedulesInput {
  before: DateTime
  after: DateTime
  employeeId: ID
}

input QueryEventsInput {
  offset: Float
  limit: Float

  """YYYY-MM-DD format"""
  dateBefore: String

  """YYYY-MM-DD format"""
  dateAfter: String
  customerId: String
  employeeId: String
}

input QueryOrganizationInput {
  id: String
  urlName: String
}

input QueryServicesInput {
  offset: Float
  limit: Float
  name: String
  cost: Float
  costOperator: NumberOperator
  employeeIds: [ID!]
}

input QueryUsersInput {
  offset: Float
  limit: Float
  role: String
}

input RegisterInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  organizationUrl: String
  organizationId: String
  role: String
}

type Service {
  name: String!
  cost: Float!
  description: String

  """Product or Service ID"""
  UPCCode: String
  organization: Organization!
  id: ID!

  """duration in minutes"""
  duration: Int!
  employees: [User!]
}

input ServiceInput {
  name: String!
  cost: Float!
  description: String

  """Product or Service ID"""
  UPCCode: String

  """duration in minutes"""
  duration: Int!
  employeeIds: [ID!]!
}

type Timeframe {
  """Minutes since beginning of day"""
  start: Int!

  """Minutes since beginning of day"""
  end: Int!
}

input TimeframeInput {
  """Minutes since beginning of day"""
  start: Int!

  """Minutes since beginning of day"""
  end: Int!
}

input UpdateUserInput {
  userId: String
  firstName: String
  lastName: String
  email: String
  role: String
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  role: UserRole!
  authCount: Float
  emailConfirmed: Boolean
  organization: Organization
}

"""User access role"""
enum UserRole {
  CUSTOMER
  EMPLOYEE
  ADMIN
}
