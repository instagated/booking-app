# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BaseStoreEntity {
  name: String!
  cost: Float!
  description: String

  """Product or Service ID"""
  UPCCode: String
}

input BaseStoreEntityInput {
  name: String!
  cost: Float!
  description: String

  """Product or Service ID"""
  UPCCode: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type EmployeeSchedule {
  id: ID!
  begins: DateTime!
  ends: DateTime!
  isRecurring: Boolean!
  recurrencePeriod: RecurrencePeriod
  recurrenceInterval: Int
  recursOn: [Boolean!]
  recurrenceEndsOn: DateTime
  employee: User!
}

input EmployeeScheduleInput {
  begins: DateTime!
  ends: DateTime!
  isRecurring: Boolean!
  recurrencePeriod: RecurrencePeriod
  recurrenceInterval: Int
  recursOn: [Boolean!]
  recurrenceEndsOn: DateTime
  employeeId: ID
}

type Event {
  id: ID!
  datetime: DateTime!
  date: String!
  begins: String!
  ends: String!

  """duration in minutes"""
  duration: Int!
  customer: User!
  employee: User!
}

input EventInput {
  datetime: DateTime!

  """duration in minutes"""
  duration: Int!
  employeeId: ID!
}

type Mutation {
  login(password: String!, email: String!): User
  logout: String
  register(data: RegisterInput!): User!
  createEvent(data: EventInput!): Event!
  deleteEvent(id: String!): Boolean!
  createService(data: ServiceInput!): Service!
  updateService(data: ServiceInput!, id: String!): Service!
  deleteService(id: String!): ID!
  createEmployeeSchedule(data: EmployeeScheduleInput!): EmployeeSchedule!
  updateEmployeeSchedule(data: EmployeeScheduleInput!, id: String!): EmployeeSchedule!
  deleteEmployeeSchedule(id: String!): String!
  employeeSchedule(id: String!): EmployeeSchedule!
  employeeSchedules(data: QueryEmployeeSchedulesInput): [EmployeeSchedule!]!
}

enum NumberOperator {
  GREATER
  LESSER
  EQUAL
}

type PaginatedEventsResponse {
  items: [Event!]!
  total: Int!
}

input PaginatedResponseInput {
  offset: Float
  limit: Float
}

type PaginatedServiesResponse {
  items: [Service!]!
  total: Int!
}

type PaginatedUsersResponse {
  items: [User!]!
  total: Int!
}

type Product {
  name: String!
  cost: Float!
  description: String

  """Product or Service ID"""
  UPCCode: String
  id: ID!
  inventory: Int!
}

input ProductInput {
  name: String!
  cost: Float!
  description: String

  """Product or Service ID"""
  UPCCode: String
  inventory: Int!
}

type Query {
  me: User
  users(data: QueryUsersInput!): PaginatedUsersResponse!
  queryEvents(data: QueryEventsInput!): PaginatedEventsResponse!
  queryEvent(id: String!): Event!
  services(data: QueryServicesInput!): PaginatedServiesResponse!
  service(id: String!): Service!
}

input QueryEmployeeSchedulesInput {
  before: DateTime
  after: DateTime
  employeeId: ID
}

input QueryEventsInput {
  offset: Float
  limit: Float
}

input QueryServicesInput {
  offset: Float
  limit: Float
  name: String
  cost: Float
  costOperator: NumberOperator
  employeeIds: [ID!]
}

input QueryUsersInput {
  offset: Float
  limit: Float
  role: String
}

"""Interval for repeating schedule"""
enum RecurrencePeriod {
  DAY
  WEEK
  MONTH
  YEAR
}

input RegisterInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

type Service {
  name: String!
  cost: Float!
  description: String

  """Product or Service ID"""
  UPCCode: String
  id: ID!

  """duration in minutes"""
  duration: Int!
  employees: [User!]
}

input ServiceInput {
  name: String!
  cost: Float!
  description: String

  """Product or Service ID"""
  UPCCode: String

  """duration in minutes"""
  duration: Int!
  employeeIds: [ID!]!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  role: UserRole!
  authCount: Float
}

"""User access role"""
enum UserRole {
  CUSTOMER
  EMPLOYEE
  ADMIN
}
